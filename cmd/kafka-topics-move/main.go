/*

Command 'kafka-topics-move' is generates a json which is used for
input of kafka-reassign-partitions.sh. 'kafka-topics-move' accepts
list of topics generated by kafka-topics.sh command.

  $ kafka-topics.sh --list --zookeeper $ZK | grep $TOPIC_RE | kafka-topics-move > out.json

To run it with test data

  $ cat testdata/kafka-topics.txt | go run main.go

To install it,

  $ go get github.com/tcnksm/misc/cmd/kafka-topics-move

See more infomatino about this on official doc [1]

[1]: http://kafka.apache.org/081/documentation.html

*/
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strings"
)

// Instruction is output format
type Instruction struct {
	Topics  []TopicInfo `json:"topics"`
	Version int         `json:"version"`
}

// TopicInfo contains topic information
type TopicInfo struct {
	Topic string `json:"topic"`
}

const defaultVersion = 1

func main() {
	os.Exit(_main())
}

func _main() int {
	// Collect all target topics to buf
	topics := make([]TopicInfo, 0)

	// Read inputs from STDIN (assume it's from kafka-topic.sh)
	log.Printf("Waiting inputs from STDIN...")
	scnr := bufio.NewScanner(os.Stdin)
	for scnr.Scan() {
		// Some topic has additional infromation like `mark for deletion`
		topic := strings.Split(scnr.Text(), " ")[0]
		if len(topic) == 0 {
			// Skip empty topic
			continue
		}
		topics = append(topics, TopicInfo{Topic: topic})
	}

	// Genreate json
	buf, err := json.MarshalIndent(&Instruction{
		Topics:  topics,
		Version: defaultVersion,
	}, "", "  ")
	if err != nil {
		log.Printf("[ERROR] Failed to marshal json %s", err)
		return 1
	}

	fmt.Printf("%s\n", string(buf))
	return 0
}
